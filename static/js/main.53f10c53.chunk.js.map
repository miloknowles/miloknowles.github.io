{"version":3,"sources":["components/top_navbar.jsx","components/about_me.jsx","components/project_card.jsx","components/project_list.jsx","components/contact_card.jsx","App.js","serviceWorker.js","index.js"],"names":["TopNavbar","Navbar","collapseOnSelect","expand","bg","variant","sticky","Brand","href","className","Toggle","aria-controls","Collapse","id","Nav","Link","Component","AboutMe","Container","fluid","Row","Col","xs","md","Image","src","rounded","class","ProjectCard_Thesis","Card","Img","Body","Title","Text","ProjectCard_LDL","ProjectList","ContactCard","style","width","Header","ListGroup","Item","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.53f10c53.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nimport Navbar from 'react-bootstrap/Navbar';\nimport Nav from 'react-bootstrap/Nav';\n\n\nclass TopNavbar extends Component {\n  render() {\n    return (\n      <Navbar collapseOnSelect expand=\"lg\" bg=\"light\" variant=\"light\" sticky=\"top\">\n        <Navbar.Brand href=\"#about\" className=\"FontStyleCode\">// Milo Knowles</Navbar.Brand>\n        <Navbar.Toggle aria-controls=\"responsive-navbar-nav\"/>\n        <Navbar.Collapse id=\"responsive-navbar-nav\">\n          <Nav className=\"mr-auto\">\n            <Nav.Link href=\"/#about\" className=\"FontStyleCode\">About Me</Nav.Link>\n            <Nav.Link href=\"/#projects\" className=\"FontStyleCode\">Projects</Nav.Link>\n            <Nav.Link href=\"/#contact\" className=\"FontStyleCode\">Contact</Nav.Link>\n          </Nav>\n          <Nav>\n            <Nav.Link href=\"/images/resume.pdf\">Resume</Nav.Link>\n            <Nav.Link href=\"https://www.linkedin.com/in/milo-knowles\">Linkedin</Nav.Link>\n            <Nav.Link href=\"https://github.com/miloknowles\" className=\"FontStyleCode\">GitHub</Nav.Link>\n            <Nav.Link href=\"https://www.strava.com/athletes/6914634\">Strava</Nav.Link>\n          </Nav>\n        </Navbar.Collapse>\n      </Navbar>\n    );\n  }\n}\n\nexport default TopNavbar;\n","import React, { Component } from 'react';\n\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Image from 'react-bootstrap/Image';\n\nclass AboutMe extends Component {\n  render() {\n    return (\n      <Container className=\"DarkBackground\"fluid>\n        <Container className=\"pt-5 pb-5\" id=\"about\">\n          <Row>\n            <Col xs={12} md={5} className=\"my-auto\">\n              {/* Fluid image auto-resizes to fit inside of its container */}\n              <Image src=\"/images/me.jpeg\" rounded fluid></Image>\n            </Col>\n            <Col xs={12} md={7} className=\"my-auto\">\n              <h1 class=\"mt-2 FontColorDarkBlue\">Milo Knowles</h1>\n              <h5 class=\"mt-2 FontColorWhite\">\n                I received my B.S and M.Eng from MIT, where I focused on robotics, computer vision,\n                and AI.\n              </h5>\n              <h5 class=\"mt-2 FontColorDarkBlue\">\n                I'm currently exploring applications of autonomous robots for sustainability\n                and climate change mitigation.\n              </h5>\n              <h5 class=\"mt-2 FontColorWhite\">\n                When I'm not writing code, I enjoy running and biking around Boston,\n                playing guitar, and trying to keep my hydroponic garden alive.\n              </h5>\n            </Col>\n          </Row>\n        </Container>\n      </Container>\n    );\n  }\n};\n\nexport default AboutMe;\n","import React, { Component } from 'react';\n\nimport Card from 'react-bootstrap/Card';\n\n\nclass ProjectCard_Thesis extends Component {\n  render() {\n    return (\n      <Card className=\"mt-5\" bg=\"light\">\n        <Card.Img variant=\"top\" src=\"/images/thesis/epistemic_example.png\" bg=\"primary\" fluid/>\n        <Card.Body>\n          <Card.Title><b>Master's Thesis (September, 2020)</b></Card.Title>\n          <Card.Text>\n            tl;dr: End-to-end <i>deep stereo networks</i> have achieved state-of-the-art accuracy for\n            depth estimation, but we need to augment these systems with an understanding of uncertainty\n            to make them safe for real-world deployment. In the context of deep learning, there are\n            two types of uncertainty we need to deal with. <i>Aleatoric</i> uncertainty, which comes from\n            image noise, occlusion, lack of texture, and other characteristics that lead to ambiguity in the estimated depth,\n            can be learned from the training data using a likelihood loss. We train our deep stereo network to predict aleatoric\n            uncertainty so that it can \"tell\" us what parts of the image it's unsure about. <i>Epistemic</i> uncertainty,\n            which occurs in environments that differ from the training set,\n            can be detected via \"novelty detection\", and mitigating through online adaptation.\n            The picture above gives an example of epistemic uncertainty: a network trained in a driving environment (left)\n            does a good job predicting disparity (inverse depth) there. However, when it's tested in an\n            unfamiliar environment (right) it has a lot of trouble, and hallucinates some geometry\n            that looks suspiciously like the training set.\n          </Card.Text>\n        </Card.Body>\n        <Card.Body>\n          <Card.Link href=\"https://drive.google.com/file/d/1aTZ8UCyJggxRbLbAdVz8h3bwSzLOCb74/view?usp=sharing\">Google Drive Link (big file, sorry)</Card.Link>\n        </Card.Body>\n      </Card>\n    );\n  }\n}\n\nclass ProjectCard_LDL extends Component {\n  render() {\n    return (\n      <Card className=\"mt-5\" bg=\"light\">\n        <Card.Img variant=\"top\" src=\"/images/ldl.png\" bg=\"primary\" fluid/>\n        <Card.Body>\n          <Card.Title><b>6.881 Project (Spring 2020): A Lagrange Dual Learning Framework For Solving Constrained Inverse Kinematics Tasks</b></Card.Title>\n          <Card.Text>\n            <i>Inverse-kinematics</i> (IK) is the task of finding a set of joint angles for a robotic arm that would place its \"end-effector\" (hand)\n            at a desired pose. This is a difficult nonlinear and nonconvex optimization problem, especially when there are constraints such as\n            joint limits or obstacles that must be avoided. I wanted to see if a neural network can learn approximate solutions to constrained IK\n            problems. I implemented constraints in the NN training procedure through <i>Lagrangian dual learning</i>. We relax the constraints into \"soft\"\n            penalties in the training objective, and iterate between training the NN on a Lagrangian relaxation, and updating the Lagrange multipliers\n            to obtain a stronger (more difficult) relaxation. I was able to get good results for my toy examples (2D world, 3-link arm, circular obstacles).\n            In the image above, the NN learns to put its end-effector in the green goal position without colliding with obstacles or bending its joints past the\n            limit I imposed. You might wonder about the bottom-left picture - in my idealized world, only joints can collide with things, and the\n            links between joints can pass through whatever they want.\n          </Card.Text>\n        </Card.Body>\n        <Card.Body>\n          <Card.Link href=\"https://github.com/miloknowles/lagrange-dual-learning\">Code</Card.Link>\n          <Card.Link href=\"https://github.com/miloknowles/lagrange-dual-learning/blob/master/report.pdf\">Report</Card.Link>\n        </Card.Body>\n      </Card>\n    );\n  }\n}\n\nexport { ProjectCard_Thesis, ProjectCard_LDL };\n","import React, { Component } from 'react';\n\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\n\nimport { ProjectCard_Thesis,\n         ProjectCard_LDL } from './project_card';\n\n\nclass ProjectList extends Component {\n  render() {\n    return (\n      <Container className=\"LightBackground\" fluid>\n        {/* NOTE: The Navbar #projects targets this! */}\n        <Container className=\"pt-5 pb-5\" id=\"projects\">\n          <Row>\n            <Col xs={12} className=\"my-auto\">\n              <h1 className=\"FontColorDarkBlue\">Projects</h1>\n              <ProjectCard_Thesis></ProjectCard_Thesis>\n              <ProjectCard_LDL></ProjectCard_LDL>\n            </Col>\n          </Row>\n        </Container>\n      </Container>\n    );\n  }\n}\n\nexport default ProjectList;\n","import React, { Component } from 'react';\n\nimport Container from 'react-bootstrap/Container';\nimport Card from 'react-bootstrap/Card';\nimport ListGroup from 'react-bootstrap/ListGroup';\n\n\nclass ContactCard extends Component {\n  render() {\n    return (\n      <Container className=\"DarkBackground\" fluid>\n        {/* NOTE: The Navbar #contact targets this! */}\n        <Container className=\"pt-5 pb-5\" id=\"contact\">\n          {/* mx-auto centers stuff! */}\n          <Card className=\"bg-light mx-auto text-center\" style={{ width: '30rem' }}>\n            <Card.Header>Contact Me</Card.Header>\n            <ListGroup variant=\"flush\">\n              <ListGroup.Item>mknowles@mit.edu</ListGroup.Item>\n              <Card.Body>\n                <Card.Link href=\"/images/resume.pdf\">Resume</Card.Link>\n                <Card.Link href=\"https://www.linkedin.com/in/milo-knowles\">Linkedin</Card.Link>\n                <Card.Link href=\"https://github.com/miloknowles\">GitHub</Card.Link>\n                <Card.Link href=\"https://www.strava.com/athletes/6914634\">Strava</Card.Link>\n              </Card.Body>\n            </ListGroup>\n          </Card>\n        </Container>\n      </Container>\n    );\n  }\n}\n\nexport default ContactCard;\n","import React from 'react';\n\nimport './css/style.css';\nimport './css/text.css';\n\nimport TopNavbar from './components/top_navbar';\nimport AboutMe from './components/about_me';\nimport ProjectList from './components/project_list';\nimport ContactCard from './components/contact_card'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <TopNavbar></TopNavbar>\n      <AboutMe></AboutMe>\n      <ProjectList></ProjectList>\n      <ContactCard></ContactCard>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}